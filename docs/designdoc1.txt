CS130 Project 1 - Design Document
=================================

Please answer all questions in this design document.  Note that the final
feedback section is optional, and you are not required to answer it if you
don't want to.

Unanswered or incompletely answered questions, or answers that don't actually
match the code/repository, will result in deductions.

Answers don't have to be deeply detailed!  We are mainly looking for an
overview or summary description of how your project works, and your team's
experiences working on this project.

Logistics (7 pts)
------------------

L1. [2pts] Enumerate all teammates here.

    Esmir Mesic 
    Jonathon Corrales de Oliveira
    Anya Vinogradsky

L2. [2pts] What did each teammate focus on during this project?

    We did the basic workbook implementation mostly pair-programming
    Once we had a representation in place we split it as:
    Esmir focused on parsing and cell updating
    Jon focused on cycle detection and cell updating
    Anya focused on tests

L3. [3pts] Approximately how many hours did each teammate spend on the project?
    Too many 
    Esmir/Jon spent easily upwards of 20?
    Anya spent 15

Spreadsheet Engine Design (20 pts)
----------------------------------

D1. [3pts] Describe the high-level design abstractions (e.g. classes and/or
    submodules) in your spreadsheet engine, and what purposes these various
    abstractions fulfill.

    The main abstractions are the workbook class, cell class, and parsers.

    The workbook stores:
        a dictionary of sheets
        a dictionary of cells that reference a cell 
        a dictionary of cells that a cell references
        a list of sheets in the order they appear
        a list of cell locations
        a parser
    The purpose of the workbook is to house the other objects. 
    It also contains useful functions like our cycle detection.

    The sheet stores:
        its id
        its name
        a dictionary of locations to cells
    The sheet allows us to easily access cells.

    The Cell stores:
        contents
        value
        type
    
    The parsers:
        we have 1 parser to parse the formulas as expected

        we have another parser that returns a list of references
        within a formula


D2. [4pts] Why did you choose the design you chose?  Describe other designs
    (or perhaps earlier versions of the above design) that you considered,
    and why you ended up not using them.

    We ended up choosing the design we chose because it seemed like it would 
    remain the most readable in the long run and the easiest model to add 
    functionality to. Early on we considered an incredibly consolidated model 
    where everything would be stored by the workbook, sheets would be stored 
    in dictionaries, and cells would be dictionaries of relevant information 
    (almost like a json object) including reference information. Reading further 
    into the spec we quickly realized this was infeasible and after discussing 
    it a little with Donnie we decided to create Sheet and Cell classes and 
    store reference information seperately in the workbook class.
    

D3. [4pts] At a high level (e.g. pseudocode or higher), enumerate the steps
    that your spreadsheet engine goes through when a caller sets a cell's
    contents.

    - contents are stripped of whitespace
    - check for location out of bounds for sheet extent
    - process contents based on the type it is
    - if contents is a formula, parse it to get a value
    - Add a cell created from the results of the above processing to the sheet
    - If the cell was a formula, add the references accordingly
    - detect cycles and set circular reference errors
    - update cells based on the topological sort returned by cycle detection
    - if contents was empty, delete the cell.


D4. [3pts] How does your spreadsheet engine identify what other cells need
    updating when a cell's contents are changed, and what order to update them?

    WHen a cell is set, we run cycle detection which internally does
    a DFS topological sort. We return the output of this topological sort
    and iterate through each cell from that output to update the value,
    reparsing as necessary.

D5. [3pts] How does your spreadsheet engine identify cycles between cells when
    a cell update is performed?  Are cells in a cycle processed any differently
    from other cells outside of the cycle?
     
    We use an iterative kosaraju algorithm on the cell and return the
    cells that are in a cycle with the cell we updated.
    Cells in a cycle are then processed into circular reference error cells.

D6. [3pts] What steps does your spreadsheet engine go through when a sheet is
    deleted from a workbook?  How does it identify cells that may be affected
    by the sheet-deletion?
    
    We iterate through the entries in a sheet to find all the cells
    For each cell we run a DFS to find the cells that are part of
    a reference chain that references the removed cell
    We then visit each cell in this chain and update it accordingly.


Implementation Process (23 pts)
-------------------------------

P1. [4pts] How did your team break down and keep track of the various tasks to
    complete for this project?  Did you use the GitHub issue tracker, or some
    other system like Trello, or some other tool?
    
    We started by group-programming to establish a base of code to work on, then 
    we used Trello to keep track of tasks that we assigned to ourselves in a 
    group call.


P2. [4pts] How did you assign tasks to teammates?  Did you stick with your
    task-assignments through the project, or did you shift around tasks as the
    project progressed?  Why?
    
    We originally assigned tasks trying to evenly distribute the workload and as
    the project progressed we all ended up delving slightly into each other's 
    tasks to help each other when someone got stuck or had an issue, but 
    otherwise stuck with our task-assignments.


P3. [4pts] How would you characterize the quality of your project testing?
    Make sure to touch on these items:  Is it automated?  Is it easy for
    teammates to run?  Is it fast?  Is it reasonably complete?
    
    It is automated, fast, easy to run (makefile) and we think it's relatively 
    complete? We tried to catch as many edge cases as possible.


P4. [3pts] What mechanisms did your team use for communication during the
    project?  Did you find them to be effective?  What issues did you
    encounter, if any?

    We mainly used a discord chat and discord voice calls. These were very effective.

P5. [3pts] Did you use any kind of collaborative construction techniques, e.g.
    code reviews or pair-programming, during the project?  If so, what are your
    observations about its usefulness?  Did you find it to have any downsides?
    
    We did pair-programming with VScode liveshare. This was very useful and led
    to us being able to work through problems efficiently. Only downsides were 
    connectivity issues but these were fixed.

P6. [5pts] What would you like to improve about your team's development
    process, going forward?

    More granularly split tasks at the start.


Section F:  CS130 Project 1 Feedback [OPTIONAL]
-----------------------------------------------

These questions are OPTIONAL, and you do not need to answer them.  Your grade
will not be affected by answering or not answering them.  Also, your grade will
not be affected by negative feedback - we want to know what went poorly so that
we can improve future versions of the course.

F1. What parts of the assignment did you find highly enjoyable?  Conversely,
    what parts of the assignment did you find unenjoyable?


F2. What parts of the assignment helped you learn more about software
    engineering best-practices, or other useful development skills?
    What parts were not helpful in learning these skills?


F3. Were there any parts of the assignment that seemed _unnecessarily_ tedious?
    (Some parts of software development are always tedious, of course.)


F4. Do you have any feedback and/or constructive criticism about how this
    project can be made better in future iterations of CS130?

